// Generated by CoffeeScript 1.10.0
var Client, ItemParser, ReportParser, _, moment, parseResponse,
  slice = [].slice;

_ = require('underscore');

moment = require('moment');

Client = require('./client');

ItemParser = require('./item-parser');

ReportParser = require('./report-parser');

parseResponse = function(res, parser, cb) {
  parser.on('error', function(err) {
    return cb(err);
  });
  parser.on('end', function(result) {
    return cb(null, result);
  });
  res.on('error', function(err) {
    return cb(err);
  });
  res.on('data', function(data) {
    return parser.write(data);
  });
  return res.on('end', function() {
    return parser.close();
  });
};

module.exports = (function() {
  _Class.prototype.debug = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (this.options.debug) {
      return console.error.apply(console, ['amazon-associate:'].concat(slice.call(args)));
    }
  };

  function _Class(options) {
    var clientOptions;
    this.options = options;
    if (this.options.associateId == null) {
      throw new Error('missing associateId option');
    }
    if (this.options.password == null) {
      throw new Error('missing password option');
    }
    _.defaults(this.options, {
      host: 'assoc-datafeeds-eu.amazon.com',
      reportPath: '/datafeed/listReports',
      username: this.options.associateId,
      debug: false
    });
    clientOptions = {
      debug: this.options.debug,
      credentials: {}
    };
    clientOptions.credentials[this.options.host] = {
      type: 'digest',
      username: this.options.username,
      password: this.options.password
    };
    this.client = new Client(clientOptions);
  }

  _Class.prototype.getReportUrl = function(date, type) {
    var datestring, filename;
    datestring = moment(date).format('YYYYMMDD');
    filename = this.options.associateId + "-" + type + "-report-" + datestring + ".xml.gz";
    return "/datafeed/getReport?filename=" + filename;
  };

  _Class.prototype._getItems = function(date, type, cb) {
    return this.client.request({
      https: true,
      host: this.options.host,
      path: this.getReportUrl(date, type),
      unzip: true
    }, function(err, res) {
      var datestring, parser;
      if (err != null) {
        return cb(err);
      }
      datestring = moment(date).format('YYYY-MM-DD');
      if (res.headers['content-length'] === '0') {
        return cb(new Error("no " + type + " for date " + datestring));
      }
      parser = new ItemParser;
      return parseResponse(res, parser, cb);
    });
  };

  _Class.prototype.getOrders = function(date, cb) {
    return this._getItems(date, 'orders', cb);
  };

  _Class.prototype.getEarnings = function(date, cb) {
    return this._getItems(date, 'earnings', cb);
  };

  _Class.prototype.getReports = function(cb) {
    return this.client.request({
      https: true,
      host: this.options.host,
      path: this.options.reportPath,
      unzip: false
    }, function(err, res) {
      var parser;
      if (err != null) {
        return cb(err);
      }
      parser = new ReportParser;
      return parseResponse(res, parser, cb);
    });
  };

  return _Class;

})();
