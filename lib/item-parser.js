// Generated by CoffeeScript 1.10.0
var EventEmitter, _, sax,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

_ = require('lodash');

sax = require('sax');

module.exports = (function(superClass) {
  extend(_Class, superClass);

  function _Class() {
    this.items = [];
    this.mode = 'search-item-list';
    this.parser = sax.parser(false);
    this.parser.onerror = (function(_this) {
      return function(err) {
        return _this.emit('error', err);
      };
    })(this);
    this.parser.onend = (function(_this) {
      return function() {
        return _this.emit('end', _this.items);
      };
    })(this);
    this.parser.onopentag = (function(_this) {
      return function(arg) {
        var attributes, item, name;
        name = arg.name, attributes = arg.attributes;
        if (_this.mode === 'search-item-list' && name === 'ITEMS') {
          _this.mode = 'next-item';
        }
        if (_this.mode === 'next-item' && name === 'ITEM') {
          item = {};
          _.each(_.keys(attributes), function(key) {
            return item[key.toLowerCase()] = attributes[key];
          });
          return _this.items.push(item);
        }
      };
    })(this);
  }

  _Class.prototype.write = function(data) {
    return this.parser.write(data);
  };

  _Class.prototype.close = function() {
    return this.parser.close();
  };

  return _Class;

})(EventEmitter);
