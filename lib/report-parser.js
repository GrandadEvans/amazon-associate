// Generated by CoffeeScript 1.10.0
var EventEmitter, sax,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

sax = require('sax');

module.exports = (function(superClass) {
  extend(_Class, superClass);

  function _Class() {
    this.reports = [];
    this.report = {};
    this.mode = 'search-table-head-end';
    this.parser = sax.parser(false);
    this.parser.onerror = (function(_this) {
      return function(err) {
        return _this.emit('error', err);
      };
    })(this);
    this.parser.onend = (function(_this) {
      return function() {
        return _this.emit('end', _this.reports);
      };
    })(this);
    this.parser.onopentag = (function(_this) {
      return function(arg) {
        var name;
        name = arg.name;
        if (_this.mode === 'next-row' && name === 'TR') {
          return _this.mode = 'read-filename';
        }
      };
    })(this);
    this.parser.ontext = (function(_this) {
      return function(text) {
        switch (_this.mode) {
          case 'read-filename':
            _this.report.filename = text;
            return _this.mode = 'read-last-modified';
          case 'read-last-modified':
            _this.report.lastModified = text;
            return _this.mode = 'read-md5';
          case 'read-md5':
            _this.report.md5 = text;
            return _this.mode = 'read-size';
          case 'read-size':
            _this.report.size = text;
            return _this.mode = 'read-url';
        }
      };
    })(this);
    this.parser.onattribute = (function(_this) {
      return function(arg) {
        var name, value;
        name = arg.name, value = arg.value;
        if (_this.mode === 'read-url' && name === 'HREF') {
          _this.report.url = value;
          _this.reports.push(_this.report);
          _this.report = {};
          return _this.mode = 'next-row';
        }
      };
    })(this);
    this.parser.onclosetag = (function(_this) {
      return function(name) {
        if (_this.mode === 'search-table-head-end' && name === 'TR') {
          return _this.mode = 'next-row';
        }
      };
    })(this);
  }

  _Class.prototype.write = function(data) {
    return this.parser.write(data);
  };

  _Class.prototype.close = function() {
    return this.parser.close();
  };

  return _Class;

})(EventEmitter);
